/**
 * user-profile controller
 */

import { factories } from '@strapi/strapi'

export default factories.createCoreController('api::user-profile.user-profile', ({ strapi }) => ({
  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async me(ctx) {
    console.log('üü¢ PROFILE: –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    const authUserId = ctx.state.user?.id;
    
    if (!authUserId) {
      console.log('‚ùå PROFILE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return ctx.unauthorized();
    }
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ users-permissions
      const authUser = await strapi.entityService.findOne(
        'plugin::users-permissions.user',
        authUserId
      );
      
      if (!authUser) {
        console.log('‚ùå PROFILE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ users-permissions');
        return ctx.notFound('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      // –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –Ω–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ
      const userProfile = await strapi.entityService.findMany(
        'api::user-profile.user-profile',
        {
          filters: {
            user: authUserId
          },
          populate: {
            avatar: true
          }
        }
      );
      
      console.log('‚úÖ PROFILE: –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω:', !!userProfile?.[0]);
      
      const profile = userProfile?.[0] as any;
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      const response = {
        id: authUser.id,
        username: authUser.username,
        email: authUser.email,
        name: authUser.name,
        provider: authUser.provider,
        confirmed: authUser.confirmed,
        blocked: authUser.blocked,
        createdAt: authUser.createdAt,
        updatedAt: authUser.updatedAt,
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        phone: profile?.phone || null,
        birthdate: profile?.birthdate || null,
        gender: profile?.gender || null,
        avatarUrl: null
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (profile?.avatar) {
        console.log('‚úÖ PROFILE: –î–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É:', profile.avatar.url);
        
        const serverUrl = strapi.config.get('server.url', 'http://localhost:1337');
        
        response.avatarUrl = profile.avatar.url.startsWith('http') 
          ? profile.avatar.url 
          : `${serverUrl}${profile.avatar.url}`;
      } else {
        console.log('‚ö†Ô∏è PROFILE: –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏');
      }
      
      return ctx.send(response);
      
    } catch (error) {
      console.error('‚ùå PROFILE: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      return ctx.badRequest('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async updateProfile(ctx) {
    console.log('üü° PROFILE: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    const authUserId = ctx.state.user?.id;
    
    if (!authUserId) {
      console.log('‚ùå PROFILE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return ctx.unauthorized();
    }
    
    try {
      const { files } = ctx.request;
      const body = ctx.request.body;
      
      console.log('üîç PROFILE: –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è:', Object.keys(body || {}));
      console.log('üîç PROFILE: –§–∞–π–ª—ã –≤ –∑–∞–ø—Ä–æ—Å–µ:', !!files?.avatar);
      
      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
      const existingProfile = await strapi.entityService.findMany(
        'api::user-profile.user-profile',
        {
          filters: {
            user: authUserId
          },
          populate: {
            avatar: true
          }
        }
      );
      
      let profileId = existingProfile?.[0]?.id;
      const currentProfile = existingProfile?.[0] as any;
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const updateData: any = {
        user: authUserId
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è (—Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ: phone, birthdate, gender)
      if (body.phone !== undefined) updateData.phone = body.phone;
      if (body.birthdate !== undefined) updateData.birthdate = body.birthdate;
      if (body.gender !== undefined) updateData.gender = body.gender;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
      if (files?.avatar) {
        console.log('üì§ PROFILE: –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é –∞–≤–∞—Ç–∞—Ä–∫—É...');
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∞–≤–∞—Ç–∞—Ä–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (currentProfile?.avatar) {
          console.log('üóëÔ∏è PROFILE: –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∞–≤–∞—Ç–∞—Ä–∫—É');
          try {
            await strapi.plugins.upload.services.upload.remove(currentProfile.avatar);
          } catch (removeError: any) {
            console.log('‚ö†Ô∏è PROFILE: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏:', removeError.message);
          }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é –∞–≤–∞—Ç–∞—Ä–∫—É
        const uploadedFiles = await strapi.plugins.upload.services.upload.upload({
          data: {},
          files: files.avatar,
        });
        
        console.log('‚úÖ PROFILE: –ê–≤–∞—Ç–∞—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', uploadedFiles[0]?.id);
        updateData.avatar = uploadedFiles[0]?.id;
      }
      
      let updatedProfile: any;
      
      if (profileId) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        console.log('‚úèÔ∏è PROFILE: –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å:', profileId);
        updatedProfile = await strapi.entityService.update(
          'api::user-profile.user-profile',
          profileId,
          {
            data: updateData,
            populate: {
              avatar: true
            }
          }
        );
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        console.log('‚ûï PROFILE: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å');
        updatedProfile = await strapi.entityService.create(
          'api::user-profile.user-profile',
          {
            data: updateData,
            populate: {
              avatar: true
            }
          }
        );
      }
      
      console.log('‚úÖ PROFILE: –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω');
      
      // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const authUser = await strapi.entityService.findOne(
        'plugin::users-permissions.user',
        authUserId
      );
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      const response = {
        id: authUser.id,
        username: authUser.username,
        email: authUser.email,
        name: authUser.name,
        provider: authUser.provider,
        confirmed: authUser.confirmed,
        blocked: authUser.blocked,
        createdAt: authUser.createdAt,
        updatedAt: authUser.updatedAt,
        phone: updatedProfile.phone || null,
        birthdate: updatedProfile.birthdate || null,
        gender: updatedProfile.gender || null,
        avatarUrl: null as string | null
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
      if (updatedProfile.avatar) {
        const serverUrl = strapi.config.get('server.url', 'http://localhost:1337');
        
        response.avatarUrl = updatedProfile.avatar.url.startsWith('http') 
          ? updatedProfile.avatar.url 
          : `${serverUrl}${updatedProfile.avatar.url}`;
        
        console.log('‚úÖ PROFILE: –ê–≤–∞—Ç–∞—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç:', response.avatarUrl);
      }
      
      return ctx.send(response);
      
    } catch (error: any) {
      console.error('‚ùå PROFILE: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      return ctx.badRequest('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: ' + error.message);
    }
  }
}));
