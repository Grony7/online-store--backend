import { Server as SocketIOServer } from 'socket.io';
import jwt from 'jsonwebtoken';

interface JwtPayload {
  id: number;
  iat: number;
  exp: number;
}

export const initializeWebSocket = (strapi: any) => {
  console.log('üöÄ WEBSOCKET: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –º–æ–¥—É–ª—è...');
  
  try {
    if (!strapi.server?.httpServer) {
      console.error('üí• WEBSOCKET: HTTP —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return null;
    }

    console.log('‚úÖ WEBSOCKET: HTTP —Å–µ—Ä–≤–µ—Ä –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º Socket.IO...');

    const io = new SocketIOServer(strapi.server.httpServer, {
      cors: {
        origin: process.env.FRONTEND_URL || "http://localhost:3000",
        methods: ["GET", "POST"],
        allowedHeaders: ["Content-Type", "Authorization"],
        credentials: true
      },
      transports: ['websocket', 'polling']
    });

    console.log('‚úÖ WEBSOCKET: Socket.IO —Å–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω');

    // Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebSocket
    io.use(async (socket, next) => {
      try {
        const token = socket.handshake.auth.token || socket.handshake.headers.authorization?.replace('Bearer ', '');
        
        if (!token) {
          return next(new Error('Authentication error: No token provided'));
        }

        // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
        const jwtSecret = process.env.JWT_SECRET || strapi.config.get('plugin.users-permissions.jwt.secret');
        const decoded = jwt.verify(token, jwtSecret) as JwtPayload;
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const user = await strapi.entityService.findOne('plugin::users-permissions.user', decoded.id, {
          populate: {
            role: true
          }
        });

        if (!user) {
          return next(new Error('Authentication error: User not found'));
        }

        (socket as any).userId = user.id;
        (socket as any).user = user;
        next();
      } catch (error) {
        console.error('üîí WEBSOCKET: Authentication error:', error);
        next(new Error('Authentication error'));
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    io.on('connection', async (socket) => {
      console.log(`üë§ WEBSOCKET: User ${(socket as any).userId} connected`);

      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ
      socket.join(`user-${(socket as any).userId}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      socket.emit('test', { message: 'WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!' });

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      try {
        console.log(`üìú WEBSOCKET: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${(socket as any).userId}`);
        
        const messages = await strapi.entityService.findMany('api::message.message', {
          filters: {
            userId: (socket as any).userId.toString()
          },
          sort: { createdAt: 'asc' },
          populate: {
            user: {
              fields: ['id', 'username', 'email']
            }
          }
        });
        
        console.log(`üì¶ WEBSOCKET: –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏: ${messages.length}`);
        
        if (messages.length > 0) {
          socket.emit('messageHistory', messages);
          console.log(`‚úÖ WEBSOCKET: –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${(socket as any).userId}`);
        }
        
      } catch (error) {
        console.error('üí• WEBSOCKET: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
      }

      // –¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      socket.on('test', (data) => {
        console.log(`üß™ WEBSOCKET: –ü–æ–ª—É—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${(socket as any).userId}:`, data);
        socket.emit('test-response', { message: '–¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!', userId: (socket as any).userId });
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∫–æ–º–Ω–∞—Ç—É (–¥–ª—è —Å–∞–ø–ø–æ—Ä—Ç–∞)
      socket.on('join', (data) => {
        const { userId } = data;
        if (userId && (socket as any).user.role?.type === 'support') {
          socket.join(`user-${userId}`);
          console.log(`üõ†Ô∏è WEBSOCKET: Support joined room for user ${userId}`);
        }
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–æ–±—ã—Ç–∏–µ send-message)
      socket.on('send-message', async (data) => {
        try {
          console.log(`üì® WEBSOCKET: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${(socket as any).userId}:`, data);
          
          const { text, isFromSupport = false, targetUserId } = data;
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          let userId = (socket as any).userId.toString();
          if (isFromSupport && targetUserId && (socket as any).user.role?.type === 'support') {
            userId = targetUserId;
          }

          console.log(`üéØ WEBSOCKET: –¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç —Å–∞–ø–ø–æ—Ä—Ç–∞
          const userIsSupport = (socket as any).user.role?.type === 'support' || (socket as any).user.role?.name === 'Support';
          if (isFromSupport && !userIsSupport) {
            console.log(`‚ùå WEBSOCKET: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${(socket as any).userId} –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–ø–ø–æ—Ä—Ç–∞ –±–µ–∑ –ø—Ä–∞–≤`);
            socket.emit('error', { message: 'Only support users can send support messages' });
            return;
          }

          // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          const messageData = {
            userId: userId,
            text,
            isFromSupport: userIsSupport ? isFromSupport : false,
            user: (socket as any).userId
          };

          console.log(`üíæ WEBSOCKET: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î:`, messageData);

          const message = await strapi.entityService.create('api::message.message', {
            data: messageData,
            populate: {
              user: {
                fields: ['id', 'username', 'email']
              }
            }
          });

          console.log(`‚úÖ WEBSOCKET: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:`, message);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          console.log(`üì§ WEBSOCKET: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É user-${userId}`);
          io.to(`user-${userId}`).emit('newMessage', message);
          
          console.log(`üí¨ WEBSOCKET: Message sent to user ${userId}`);
          
        } catch (error) {
          console.error('üí• WEBSOCKET: Error sending message:', error);
          socket.emit('error', { message: 'Failed to send message', error: error.message });
        }
      });

      // –î—É–±–ª–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è message
      socket.on('message', async (data) => {
        try {
          console.log(`üì® WEBSOCKET: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ message) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${(socket as any).userId}:`, data);
          
          const { text, isFromSupport = false, targetUserId } = data;
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          let userId = (socket as any).userId.toString();
          if (isFromSupport && targetUserId && (socket as any).user.role?.type === 'support') {
            userId = targetUserId;
          }

          console.log(`üéØ WEBSOCKET: –¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç —Å–∞–ø–ø–æ—Ä—Ç–∞
          const userIsSupport = (socket as any).user.role?.type === 'support' || (socket as any).user.role?.name === 'Support';
          if (isFromSupport && !userIsSupport) {
            console.log(`‚ùå WEBSOCKET: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${(socket as any).userId} –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–ø–ø–æ—Ä—Ç–∞ –±–µ–∑ –ø—Ä–∞–≤`);
            socket.emit('error', { message: 'Only support users can send support messages' });
            return;
          }

          // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          const messageData = {
            userId: userId,
            text,
            isFromSupport: userIsSupport ? isFromSupport : false,
            user: (socket as any).userId
          };

          console.log(`üíæ WEBSOCKET: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î:`, messageData);

          const message = await strapi.entityService.create('api::message.message', {
            data: messageData,
            populate: {
              user: {
                fields: ['id', 'username', 'email']
              }
            }
          });

          console.log(`‚úÖ WEBSOCKET: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:`, message);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          console.log(`üì§ WEBSOCKET: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É user-${userId}`);
          io.to(`user-${userId}`).emit('newMessage', message);
          
          console.log(`üí¨ WEBSOCKET: Message sent to user ${userId}`);
          
        } catch (error) {
          console.error('üí• WEBSOCKET: Error sending message:', error);
          socket.emit('error', { message: 'Failed to send message', error: error.message });
        }
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      socket.on('getMessages', async (data) => {
        try {
          console.log(`üìú WEBSOCKET: –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${(socket as any).userId}:`, data);
          
          const { userId } = data;
          let targetUserId = (socket as any).userId.toString();
          
          // –ï—Å–ª–∏ —Å–∞–ø–ø–æ—Ä—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if (userId && (socket as any).user.role?.type === 'support') {
            targetUserId = userId;
          }

          console.log(`üéØ WEBSOCKET: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${targetUserId}`);

          const messages = await strapi.entityService.findMany('api::message.message', {
            filters: {
              userId: targetUserId
            },
            sort: { createdAt: 'asc' },
            populate: {
              user: {
                fields: ['id', 'username', 'email']
              }
            }
          });
          
          console.log(`üì¶ WEBSOCKET: –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messages.length}`);
          socket.emit('messageHistory', { messages });
          
        } catch (error) {
          console.error('üí• WEBSOCKET: Error getting messages:', error);
          socket.emit('error', { message: 'Failed to get messages', error: error.message });
        }
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
      socket.on('disconnect', () => {
        console.log(`üë§ WEBSOCKET: User ${(socket as any).userId} disconnected`);
      });
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ io –≤ strapi –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
    (strapi as any).io = io;
    
    console.log('‚úÖ WEBSOCKET: WebSocket —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
    return io;

  } catch (error) {
    console.error('üí• WEBSOCKET: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    return null;
  }
}; 